library(ggplot2)
library(scuttle)
library(scran)
library(scater)
library(RColorBrewer)
library(slingshot)
library(reticulate)
library(phateR)
library(viridis)
library(grDevices)
library(reticulate)
library(phateR)
#library(tradeSeq)
reticulate::use_condaenv("phate")
devtools::install_github('cole-trapnell-lab/monocle3')
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'HDF5Array',
'terra', 'ggrastr'))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'HDF5Array',
'terra', 'ggrastr'), force = TRUE)
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
BiocManager::install("DEP")
library(DEP)
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
strsplit("abc", "b")
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
shiny::runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
runApp('C:/Users/shihb/OneDrive - Lancaster University/work/project/2023/20230816_nwcr/evergene')
remotes::install_version("Matrix", version = "1.6-1.1")
library(Seurat)
# Enter commands in R (or R studio, if installed)
install.packages('Seurat')
library(Seurat)
library(Seurat)
version("Matrix")
package_version("Matrix")
packageVersion("Matrix")
update.packages("Matrix")
library(Seurat)
install.packages("Matrix")
library(Seurat)
library(Seurat)
install.packages("Matrix")
install.packages("Matrix", version=1.6.4)
install.packages("Matrix", version="1.6.4")
install.packages("Matrix", version="1.6-4")
install.packages('Seurat')
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
BiocManager::install("scDblFinder")
BiocManager::install("scuttle")
BiocManager::install("scran")
install.packages("RColorBrewer")
library(ggplot2)
BiocManager::install("slingshot")
install.packages("reticulate")
install.packages("viridis")
install.packages("grDevices")
install.packages("grDevices")
install.packages("phateR")
remotes::install_github('satijalab/seurat-wrappers')
install.packages("remotes")
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("rsample")
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("ranger")
install.packages("gam")
install.packages("pbapply")
install.packages("Hmisc")
install.packages("pheatmap")
library(Seurat)
library(SingleCellExperiment)
#library(SingleR)
library(scDblFinder)
#library(glmGamPoi)
library(ggplot2)
library(scuttle)
library(scran)
library(scater)
library(RColorBrewer)
library(slingshot)
library(reticulate)
library(viridis)
library(grDevices)
library(phateR)
library(SeuratWrappers)
reticulate::use_python("C:/Users/shihb/AppData/Local/anaconda3/envs/phate")
reticulate::use_condaenv("phate")
reticulate::py_discover_config(required_module = "phate")
remotes::install_github('satijalab/seurat-wrappers')
library(Seurat)
library(SingleCellExperiment)
#library(SingleR)
library(scDblFinder)
#library(glmGamPoi)
library(ggplot2)
library(scuttle)
library(scran)
library(scater)
library(RColorBrewer)
library(slingshot)
library(reticulate)
library(viridis)
library(grDevices)
library(phateR)
library(SeuratWrappers)
uninstall.packages("Seurat")
remove.packages("Seurat")
remotes::install_version("SeuratObject", "4.3.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
remove.packages("SeuratObjec")
remove.packages("SeuratObjetc")
remove.packages("SeuratObject")
remotes::install_version("SeuratObject", "4.3.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
remotes::install_version("SeuratObject", "4.1.3", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
remotes::install_version("Seurat", "4.3.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
1:10:2
1:10
x <- c(1, 2, 3, 4)
y <- c(10, 20, 30, 40)
paste(x, y, sep="!")
paste(x, y, sep="is not")
paste(x, y, sep=" is not ")
paste(x, y, sep=" X ")
paste0("Image", x, "Cell", y)
paste0("Image", x, "_cell", y)
paste0("Image", x, "_Cell", y)
paste0("Image", x, "_Nuclei", y)
x <- 1:4
y <- c("24h", "36h")
paste0("mouse", x, "time", y)
y <- c("24h", "36h")
paste0("mouse", x, "_time", y)
paste0("mouse", x, "_", y)
x <- 1:4
y <- c("24h", "36h")
paste0("sample", x, "_", y)
x <- 1:3
y <- c(10, 20)
x + y
paste0("sample", x, "_", y)
paste0("sample", x, "_", y)
x <- 1:3
y <- c(10, 20)
x + y
x <- 1:10
sum(x)
sd(x)
mean(x)
fun_C2K <- function(in_c){
out <- (in_c * 2) + 30
return(out)
}
fun_C2K(x)
fun_C2F <- function(in_c){
out <- (in_c * 2) + 30
out <- paste(out, "F")
return(out)
}
fun_C2F(x)
setwd("C:\Users\shihb\OneDrive - Lancaster University\work\teaching\biocodingClub\R\20240722_data_organisation"
setwd("C:/Users/shihb/OneDrive - Lancaster University/work/teaching/biocodingClub/R/20240722_data_organisation"
setwd("C:/Users/shihb/OneDrive - Lancaster University/work/teaching/biocodingClub/R/20240722_data_organisation")
setwd("C:/Users/shihb/OneDrive - Lancaster University/work/teaching/biocodingClub/R/20240722_data_organisation")
setwd("C:/Users/shihb/OneDrive - Lancaster University/work/teaching/biocodingClub/R/20240722_data_organisation")
list.files()
cellprofiler_analysis <- read.csv("cellprofiler_analysis.csv")
cellprofiler_analysis <- read.csv("cellprofiler_analysis.csv")
cellprofiler_analysis <- read.csv("data/cellprofiler_analysis.csv")
cellprofiler_analysis <- read.csv("data/cellprofiler_analysis.csv")
sample_annotation <- read.csv("data/sample_annotation.csv")
head(cellprofiler_analysis)
head(sample_annotation)
head(cellprofiler_analysis)
cellprofiler_analysis$Intensity_per_foci_method1 <- cellprofiler_analysis$Nuclear_intensity / cellprofiler_analysis$Number_foci_method1
View(cellprofiler_analysis)
head(cellprofiler_analysis)
cellprofiler_analysis[,1]
cellprofiler_analysis[,]
dim(cellprofiler_analysis)
?merge
summary(cellprofiler_analysis)
cellprofiler_analysis$ImageNumber <- factor(cellprofiler_analysis$ImageNumber)
# This would change the summary
summary(cellprofiler_analysis)
cellprofiler_analysis_annotated <- merge(cellprofiler_analysis, image_annotation, by.x="ImageNumber", by.y="image_id")
image_annotation <- read.csv("data/image_annotation.csv")
cellprofiler_analysis_annotated <- merge(cellprofiler_analysis, image_annotation, by.x="ImageNumber", by.y="image_id")
object_per_image <- aggregate(data = annotated_analysis)
annotated_analysis <- merge(cellprofiler_analysis, image_annotation, by.x="ImageNumber", by.y="image_id")
object_per_image <- aggregate(data = annotated_analysis, object~ImageNumber)
object_per_image <- aggregate(data = annotated_analysis, object~ImageNumber, fun=length)
object_per_image <- aggregate(data = annotated_analysis, ObjectNumber~ImageNumber, fun=length)
View(annotated_analysis)
object_per_image <- aggregate(data = annotated_analysis, ObjectNumber~ImageNumber, fun=length)
object_per_image <- aggregate(data = annotated_analysis, ObjectNumber~ImageNumber, fun=length)
object_per_image <- aggregate(data = annotated_analysis, ObjectNumber~ImageNumber, FUN = =length)
object_per_image <- aggregate(data = annotated_analysis, ObjectNumber~ImageNumber, FUN = length)
object_per_image
head(object_per_image)
colnames(object_per_image) <- c("ImageNumber", "ObjectCount")
head(object_per_image)
cellprofiler_analysis <- read.csv("data/cellprofiler_analysis.csv")
image_annotation <- read.csv("data/image_annotation.csv")
annotated_analysis <- merge(cellprofiler_analysis, image_annotation, by.x="ImageID", by.y="image_id")
annotated_analysis$intensity_per_foci_method1 <- annotated_analysis$Number_foci_method1/annotated_analysis$Number_foci_method1
annotated_analysis$intensity_per_foci_method1 <- annotated_analysis$intensity_per_foci_method1/annotated_analysis$Number_foci_method1
annotated_analysis$intensity_per_foci_method1 <- annotated_analysis$Nuclear_intensity/annotated_analysis$Number_foci_method1
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, ObjectNumber ~ treatment + timepoint, FUN = mean)
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, ObjectID ~ treatment + timepoint, FUN = mean)
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, NucleiID ~ treatment + timepoint, FUN = mean)
avg_foci_per_nuclei
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, Number_foci_method1 ~ ImageID + NucleiID, FUN = mean)
avg_foci_per_nuclei
head()
head(avg_foci_per_nuclei )
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, Number_foci_method1 ~ ImageID , FUN = mean)
avg_foci_per_nuclei
head(avg_foci_per_nuclei )
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, Number_foci_method1 ~ treatment + timepoint, FUN = mean)
avg_foci_per_nuclei
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, Number_foci_method1 + NucleiID ~ ImageID , FUN = length)
avg_foci_per_nuclei
head(avg_foci_per_nuclei)
foci_per_image <- aggregate(data = annotated_analysis, . ~ ImageID , FUN = sum)
foci_per_image
foci_per_image <- aggregate(data = annotated_analysis[,c("Number_foci_method1", "Number_foci_method2", "Number_foci_method1", "ImageID")], . ~ ImageID , FUN = sum)
foci_per_image
head(foci_per_image )
annotated_analysis_subset <- annotated_analysis[,c("Number_foci_method1", "Number_foci_method2", "Number_foci_method3", "ImageID")]
foci_per_image <- aggregate(data = annotated_analysis_subset, . ~ ImageID , FUN = sum)
annotated_analysis_subset
head(annotated_analysis_subset )
# Answer to Challange Q7.
fun_stock_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
return(stock_vol)
}
fun_water_vol <- function(stock_con, target_con, target_vol){
# Calculate the required water volume used to dilute the stock
stock_vol <- target_con * target_vol / stock_con
water_vol <- target_vol - stock_vol
return(water_vol)
}
original_concentration <- 100
final_concentration <- c(1, 0.1, 0.01)
final_volume_ml <- 10
fun_stock_vol(original_concentration, final_concentration, final_volume_ul)
fun_stock_vol(original_concentration, final_concentration, final_volume_ml)
fun_water_vol(original_concentration, final_concentration, final_volume_ml)
# Answer to Challange Q7.
# Assuming that stock concentration and target concentration has the same unit, and the stock volume and target volume have the same unit
fun_stock_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
return(stock_vol)
}
fun_water_vol <- function(stock_con, target_con, target_vol){
# Calculate the required water volume used to dilute the stock
stock_vol <- target_con * target_vol / stock_con
water_vol <- target_vol - stock_vol
return(water_vol)
}
original_concentration <- 100
final_concentration <- c(1, 0.1, 0.01)
final_volume <- 10
fun_stock_vol(original_concentration, final_concentration, final_volume)
fun_water_vol(original_concentration, final_concentration, final_volume)
fun_dilution_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("stock:", stock_vol, ", water:", water_vol)
return(stock_vol)
}
fun_dilution_vol(original_concentration, final_concentration, final_volume)
fun_dilution_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("stock:", stock_vol, ", water:", water_vol)
return(output)
}
fun_dilution_vol(original_concentration, final_concentration, final_volume)
fun_dilution_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("target concentration:", target_con, "stock:", stock_vol, ", water:", water_vol)
return(output)
}
fun_dilution_vol(original_concentration, final_concentration, final_volume)
fun_dilution_vol <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("target concentration:", target_con, ", stock volume:", stock_vol, ", water volume:", water_vol)
return(output)
}
fun_dilution_vol(original_concentration, final_concentration, final_volume)
have the same unit
fun_dilution <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("target concentration: ", target_con, ", stock volume: ", stock_vol, ", water volume: ", water_vol)
return(output)
}
fun_dilution(original_concentration, final_concentration, final_volume)
fun_dilution <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("stock concentration: ", stock_con, ", target concentration: ", target_con, ", stock volume: ", stock_vol, ", water volume: ", water_vol)
return(output)
}
fun_dilution(original_concentration, final_concentration, final_volume)
fun_dilution <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("stock concentration: ", stock_con, ", target concentration: ", target_con, ", stock volume: ", stock_vol, ", water volume: ", water_vol)
return(output)
}
fun_dilution(stock_con=100, target_con=c(10, 1, 0.1), target_vol=100)
fun_dilution <- function(stock_con, target_con, target_vol){
# Calculate the required stock volume
stock_vol <- target_con * target_vol / stock_con
# Subtract the stock solution volume from the target volume to get the amount of water required to make the diluted solution
water_vol <- target_vol - stock_vol
output <- paste0("stock concentration: ", stock_con, ", target concentration: ", target_con, ", stock volume: ", stock_vol, ", water volume: ", water_vol)
return(output)
}
fun_dilution(stock_con=100, target_con=c(50, 10, 8), target_vol=100)
fun_dilution(stock_con=100, target_con=c(50, 10, 8), target_vol=c(100, 50))
# Import data
cellprofiler_analysis <- read.csv("data/cellprofiler_analysis.csv")
# Find out the column names
colnames(cellprofiler_analysis)
# Refer to the whole column by its name
cellprofiler_analysis$ImageID
# Look at the top 5 numbers of a vector
head(cellprofiler_analysis$ImageID)
# Refer to the whole column by its index. In R, you use a square bracket to refer to the [ row, column ]. Empty means refer to all
cellprofiler_analysis[ , 1]
# You can perform most of the functions in Task 1.2 on columns. Give them a try. For example:
sum(cellprofiler_analysis$ImageID)
# You can use columns from the same table to perform analysis
# Make a new column made from dividing Nuclear_intensity by Number_foci_method1
cellprofiler_analysis$Intensity_per_foci_method1 <- cellprofiler_analysis$Intensity / cellprofiler_analysis$Number_foci_method1
dim(cellprofiler_analysis)
annotated_analysis$intensity_per_foci_method1 <- annotated_analysis$Intensity/annotated_analysis$Number_foci_method1
cellprofiler_analysis <- read.csv("data/cellprofiler_analysis.csv")
annotated_analysis <- merge(x = cellprofiler_analysis, y = image_annotation, by.x="", by.y="")
annotated_analysis <- merge(x = cellprofiler_analysis, y = image_annotation, by.x="ImageID", by.y="image_id")
annotated_analysis$intensity_per_foci_method1 <- annotated_analysis$Intensity/annotated_analysis$Number_foci_method1
aggregate(annotated_analysis, intensity_per_foci_method1 ~ ImageID, mean)
aggregate(annotated_analysis, intensity_per_foci_method1 ~ treatment + timepoint, mean)
group_by_treatment <- aggregate(data = annotated_analysis, treatment ~ intensity , FUN = mean)
group_by_treatment <- aggregate(data = annotated_analysis, treatment ~ Intensity , FUN = mean)
warning()
group_by_treatment
group_by_treatment <- aggregate(data = annotated_analysis, Intensity ~ treatment , FUN = mean)
group_by_treatment
x="ImageID", by.y="Image_id")
annotated_analysis <- merge(x = cellprofiler_analysis, y = image_annotation, by.x="ImageID", by.y="Image_id")
head(annotated_analysis)
?save.csv
?write.csv
avg_foci_per_nuclei <- aggregate(data = annotated_analysis, Number_foci_method1 ~ treatment + timepoint, FUN = mean)
head(avg_foci_per_nuclei )
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, avg_foci_per_nuclei$timepoint), ]
avg_foci_per_nuclei_sorted
avg_foci_per_nuclei[order(avg_foci_per_nuclei$Number_foci_method1), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$Number_foci_method1, decreasing = TRUE), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, avg_foci_per_nuclei$timepoint, decreasing = c(TRUE, FALSE)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, avg_foci_per_nuclei$timepoint), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, -avg_foci_per_nuclei$timepoint), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, -avg_foci_per_nuclei[["timepoint"]]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, -avg_foci_per_nuclei[[2]]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei[[1]], -avg_foci_per_nuclei[[2]]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei[,1], -avg_foci_per_nuclei[,2]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei[,1], - avg_foci_per_nuclei[,2]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei[,1], avg_foci_per_nuclei[,2]), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, -treatment, timepoint), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, order(-treatment, timepoint)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, order(treatment, timepoint)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, order(-treatment, timepoint)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, order(-(treatment), timepoint)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[with(avg_foci_per_nuclei, order(-1*treatment, timepoint)), ]
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, avg_foci_per_nuclei$timepoint), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, avg_foci_per_nuclei$timepoint), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, rev(avg_foci_per_nuclei$timepoint)), ]
avg_foci_per_nuclei[order(rev(avg_foci_per_nuclei$Number_foci_method1)), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$Number_foci_method1), ]
# You can sort by multiple column
avg_foci_per_nuclei_sorted <- avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, -rank(avg_foci_per_nuclei$timepoint)), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, -rank(avg_foci_per_nuclei$timepoint)), ]
avg_foci_per_nuclei[order(avg_foci_per_nuclei$treatment, rank(avg_foci_per_nuclei$timepoint)), ]
